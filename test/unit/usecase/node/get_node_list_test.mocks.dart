// Mocks generated by Mockito 5.0.8 from annotations
// in symbol_node_watcher/test/unit/usecase/node/get_node_list_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:symbol_node_watcher/domain/entities/setting/account_setting.dart'
    as _i5;
import 'package:symbol_node_watcher/domain/entities/setting/node_setting.dart'
    as _i4;
import 'package:symbol_node_watcher/domain/repositories/setting/setting_repository.dart'
    as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [SettingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingRepository extends _i1.Mock implements _i2.SettingRepository {
  MockSettingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> addNodeSetting(
          {String? host, String? name, bool? https, bool? notification}) =>
      (super.noSuchMethod(
          Invocation.method(#addNodeSetting, [], {
            #host: host,
            #name: name,
            #https: https,
            #notification: notification
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteNodeSetting({String? host}) => (super.noSuchMethod(
      Invocation.method(#deleteNodeSetting, [], {#host: host}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  bool existsNodeSetting({String? host}) => (super.noSuchMethod(
      Invocation.method(#existsNodeSetting, [], {#host: host}),
      returnValue: false) as bool);
  @override
  List<_i4.NodeSetting> getNodeSettings() =>
      (super.noSuchMethod(Invocation.method(#getNodeSettings, []),
          returnValue: <_i4.NodeSetting>[]) as List<_i4.NodeSetting>);
  @override
  _i3.Future<void> updateNodeSetting(
          {String? host, String? name, bool? https, bool? notification}) =>
      (super.noSuchMethod(
          Invocation.method(#updateNodeSetting, [], {
            #host: host,
            #name: name,
            #https: https,
            #notification: notification
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> addAccountSetting({String? address, String? name}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addAccountSetting, [], {#address: address, #name: name}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteAccountSetting({String? address}) =>
      (super.noSuchMethod(
          Invocation.method(#deleteAccountSetting, [], {#address: address}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  bool existsAccountSetting({String? address}) => (super.noSuchMethod(
      Invocation.method(#existsAccountSetting, [], {#address: address}),
      returnValue: false) as bool);
  @override
  List<_i5.AccountSetting> getAccountSettings() =>
      (super.noSuchMethod(Invocation.method(#getAccountSettings, []),
          returnValue: <_i5.AccountSetting>[]) as List<_i5.AccountSetting>);
  @override
  _i3.Future<void> updateAccountSetting({String? address, String? name}) =>
      (super.noSuchMethod(
          Invocation.method(
              #updateAccountSetting, [], {#address: address, #name: name}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
}
